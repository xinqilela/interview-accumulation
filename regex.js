/*
* Regex:
* (1)exec：为捕获组而设计,接受一个字符串作为参数，返回包含第一个匹配相应信息的数组，没有匹配项时返回null。
*          在不设置全局标志的情况下，在同一个字符串上多次调用exec将始终返回第一个匹配项的信息，
*          在设置全局标志的情况下，每次调用exec都会在字符串中继续查找新的匹配项。
* (2)test：接受一个字符串参数，在模式与该参数匹配的情况下返回true,否则返回false。
* String:
* (1)match：本质上与Regex 的exec方法相同，接受一个正则表达式作为参数。
* (2)search：返回字符串中第一个匹配相应信息的索引，若没有则返回-1。
* (3)replace：第一个参数为字符串或Regex对象，第二个参数为字符串或者函数，若第一个参数为字符串，则只会替换第一个子串；
*             若想替换所有子串，需要提供正则表达式且需要设置全局标志。
* */

/*
* \s    任何空白字符
* \S    任何非空白字符
* \d    匹配一个数字字符
* \D    匹配一个非数字字符
* \w    匹配字母、数字、下划线
* \W	匹配非字母、数字、下划线
*  .    任何除换行之外的单个字符
*  \r   匹配回车符
*  \n   匹配换行符
*  \f   匹配换页符
*  \t   匹配制表符
* */
/*
/^[a-zA-Z0-9_]{1,}$ /     // 所有包含一个以上的字母、数字或下划线的字符串
/^[1-9][0-9]{0,}$ /       // 所有的正整数
/^\-{0,1}[0-9]{1,}$ /     // 所有的整数
/^[-]?[0-9]+\.?[0-9]+$/   // 所有的浮点数
/(\w+):\/\/([^:/]+)(:\d*)?([^#]*)/                将一个URL解析为协议、域、端口及相对路径。
/<\s*(\S+)(\s[^>]*)?>[\s\S]*<\s*\/\1\s*>/         html标记
*/

var str = 'aaa"bbbc"c"cddd"bbb"';
var pattern = /('|")+/g;
var index = 0;
var tmp = [];
var test = pattern.exec(str);
console.log(test);
while (test != null) {
    if (test) {
        index = test.index;
    }
    tmp.push(index);
    test = pattern.exec(str);
}
console.log(tmp);