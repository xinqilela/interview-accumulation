/*
https://juejin.im/entry/58b7ad418ac24766f5609206
*/

/*
margin第一个参数设为auto并不能垂直居中
*/
.red {
    width: 30px;
    height: 30px;
    background: red;
    margin: 0px auto;
}

#content {
    position: relative;
    left: 50%;
    float: left;
}

.float-div {
    position: relative;
    float: left;
    right: 0%;
}

/*
Formatting context:
 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。
 最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。
 BFC: "块级格式化上下文"。
     它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。
     如何生成：满足一下之一即可
         根元素
         float的值不为none
         overflow的值不为visible
         display的值为inline-block、table-cell、table-caption
         position的值为absolute或fixed
     应用：
       防止margin重叠　　　
       清除内部浮动
       自适应多兰布局
*/

/*
flex布局：
http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html
http://www.ruanyifeng.com/blog/2015/07/flex-examples.html
*/

/*
grid布局：
  是CSS中最强大的布局系统。 这是一个二维系统，这意味着它可以同时处理列和行，不像 flexbox 那样主要是一维系统。
你可以通过将CSS规则应用于父元素和该元素的子元素，来使用网格布局。
https://segmentfault.com/a/1190000012889793
  1.“fr”单位允许您将轨道大小设置为网格容器自由空间的一部分。自由空间是在排除所有不可伸缩的 grid item 之后计算得到的。
  父元素：
    justify-items沿着行轴对齐网格内的内容（与之对应的是 align-items, 即沿着列轴对齐）。
    justify-content设置网格容器内的网格的对齐方式。 此属性沿着行轴对齐网格（与之对应的是 align-content, 沿着列轴对齐）。
    grid-auto-columns / grid-auto-rows指定自动生成的网格轨道（又名隐式网格轨道）的大小。
    grid-auto-flow如果你存在没有显示指明放置在网格上的 grid item，则自动放置算法会自动放置这些项目。
  子元素：
    justify-self沿着行轴对齐grid item 里的内容（与之对应的是 align-self, 即沿列轴对齐）
  而该属性则用于控制自动布局算法的工作方式。
*/
.grid-wrapper {
    width: 100%;
    height: 300px;
    display: grid;
    grid-template-columns: 100px 100px 100px 100px;
    grid-template-rows: auto;
    grid-template-areas:
            "header header header header"
            "main main . sidebar"
            "footer footer footer footer";
    justify-items: center;
    align-items:end;
    justify-content: end;
}
.item{
    width: 50px;
    height: 50px;
    background: pink;
}

.item-a {
    grid-area: header;
    background: red;
}
.item-b {
    grid-area: main;
    background: yellow;
}
.item-c {
    grid-area: sidebar;
    background: gray;
}
.item-d {
    grid-area: footer;
    background: green;
}